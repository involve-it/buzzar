 MongoDB Configuration
========================

DB is now accessible from outside using following URL: mongodb://shiners.mobi:27017/buzzar and requires authorization.

Command to run localhost locally with production DB:
`MONGO_URL="mongodb://buzzarrw:7Y3MEgANBDsIWgHdhHLUJYMbs@shiners.mobi:27017/buzzar" meteor`

--------------------------------------------

Users setup:

buzzarrw:7Y3MEgANBDsIWgHdhHLUJYMbs
User has read/write access to buzzar database. Use this user for all DB connections.

sa:Bu$$arM0ng0Adm!n
User has admin right to all databases. This user is only to be used when manually connecting to DB.

--------------------------------------------

Changes to MUP scripts:

1. /src/modules/meteor/assets/templates/start.sh
* removed option useLocalMongo: there was a bug forcing it to always use local mongo DB.

2. /src/modules/mongo/assets/mongo-start.sh
* modified --publish option to have MongoDB docker container be accessible from outside world (listen to 0.0.0.0:27017 instead of 127.0.0.1)
* modified attached volumes to include logging
* modified configuration file pointer (the one inside Mup package is no longer used): new mongod.conf is stored @ /etc/mongod.conf on the server and includes following changes:
  - Use wiredTiger engine
  - Enable authorization
  - Logging
  - Removed Bind IP setting

---------------------------------------------

If MUP update is required, above-mentioned changes will need to be re-applied after update is completed. New versions of start.sh and mongo-start.sh files are included below.

---------------------------------------------

start.sh
==========
#!/bin/bash

APPNAME=<%= appName %>
APP_PATH=/opt/$APPNAME
BUNDLE_PATH=$APP_PATH/current
ENV_FILE=$APP_PATH/config/env.list
PORT=<%= port %>

# Remove previous version of the app, if exists
docker rm -f $APPNAME

# Remove frontend container if exists
docker rm -f $APPNAME-frontend

# We don't need to fail the deployment because of a docker hub downtime
set +e
docker pull <%= docker.image %>
set -e

docker run \
  -d \
  --restart=always \
  --publish=$PORT:80 \
  --volume=$BUNDLE_PATH:/bundle \
  --hostname="$HOSTNAME-$APPNAME" \
  --env-file=$ENV_FILE \
  <% if(logConfig && logConfig.driver)  { %>--log-driver=<%= logConfig.driver %> <% } %>\
  <% for(var option in logConfig.opts) { %>--log-opt <%= option %>=<%= logConfig.opts[option] %> <% } %>\
  <% for(var volume in volumes) { %>-v <%= volume %>:<%= volumes[volume] %> <% } %>\
  <% for(var args in docker.args) { %> <%= docker.args[args] %> <% } %>\
  --name=$APPNAME \
  <%= docker.image %>

<% if(typeof sslConfig === "object")  { %>
  # We don't need to fail the deployment because of a docker hub downtime
  set +e
  docker pull <%= docker.imageFrontendServer %>
  set -e
  docker run \
    -d \
    --restart=always \
    --volume=/opt/$APPNAME/config/bundle.crt:/bundle.crt \
    --volume=/opt/$APPNAME/config/private.key:/private.key \
    --link=$APPNAME:backend \
    --publish=<%= sslConfig.port %>:443 \
    --name=$APPNAME-frontend \
    <%= docker.imageFrontendServer %> /start.sh
<% } %>

mongo-start.sh
================
#!/bin/bash

set -e
# we use this data directory for the backward compatibility
# older mup uses mongodb from apt-get and they used this data directory
sudo mkdir -p /var/lib/mongodb

sudo docker pull mongo:latest
set +e
sudo docker rm -f mongodb
set -e

sudo docker run \
  -d \
  --restart=always \
  --publish=0.0.0.0:27017:27017 \
  --volume=/var/lib/mongodb:/var/lib/mongodb \
  --volume=/etc/mongod.conf:/mongod.conf \
  --volume=/var/log/mongodb:/var/log/mongodb \
  --name=mongodb \
  mongo mongod -f /mongod.conf

mongod.conf
=============
# mongod.conf

# for documentation of all options, see:
#   http://docs.mongodb.org/manual/reference/configuration-options/

# Where and how to store data.
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true
  engine: wiredTiger
#  engine:
#  mmapv1:
#  wiredTiger:

# where to write logging data.
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

# network interfaces
net:
  port: 27017
#  bindIp: 127.0.0.1

setParameter:
  enableLocalhostAuthBypass: true

#processManagement:

security:
  authorization: "enabled"

#operationProfiling:

#replication:

#sharding:

## Enterprise-Only Options:

#auditLog:

#snmp:

============

remotely backup db:
mongodb c_aarutyunyan$ mongodump --host shiners.mobi  --port 27017 --username sa --password Bu$$arM0ng0Admnpm  --out bla-bla
2016-12-29T18:20:22.750-0800	Failed: error connecting to db server: server returned error on SASL authentication step: Authentication failed.